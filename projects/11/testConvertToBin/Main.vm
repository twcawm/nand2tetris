function Main.main 1
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0
push constant 8000
call Memory.peek 1
pop local 0
push local 0
call Main.convert 1
pop temp 0
push constant 0
return
function Main.convert 3
push constant 0
not
pop local 2
label WHILEBLOCK0
push local 2
not
if-goto ENDWHILE0
push local 1
push constant 1
add
pop local 1
push local 0
call Main.nextMask 1
pop local 0
push local 1
push constant 16
gt
not
if-goto LTRUE0
goto LFALSE0
label LTRUE0
push argument 0
push local 0
and
push constant 0
eq
not
if-goto LTRUE1
goto LFALSE1
label LTRUE1
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
goto LEND1
label LFALSE1
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
label LEND1
goto LEND0
label LFALSE0
push constant 0
pop local 2
label LEND0
goto WHILEBLOCK0
label ENDWHILE0
push constant 0
return
function Main.nextMask 0
push argument 0
push constant 0
eq
if-goto LTRUE2
goto LFALSE2
label LTRUE2
push constant 1
return
goto LEND2
label LFALSE2
push argument 0
push constant 2
call Math.multiply 2
return
label LEND2
function Main.fillMemory 0
label WHILEBLOCK1
push argument 1
push constant 0
gt
not
if-goto ENDWHILE1
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
push argument 1
push constant 1
sub
pop argument 1
push argument 0
push constant 1
add
pop argument 0
goto WHILEBLOCK1
label ENDWHILE1
push constant 0
return
