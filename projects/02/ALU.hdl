// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // it seems like we should use a bunch of mutex to do the stuff like zx
   // since we can use zx as the sel, x as one input, and false as another
   // then we can label that as like, xZx for "x after Zx" basically

    Mux16(a=x, b=false, sel = zx, out = xZx);
    Not16(in=xZx, out = notxZx); // this output holds result of not
    Mux16(a=xZx, b=notxZx, sel= nx, out= xNZx);
    // xNZx is the result of x after any specified zx and/or nx operation.
    // now do the same for y:
    Mux16(a=y, b=false, sel = zy, out = yZy);
    Not16(in=yZy, out = notyZy); // this output holds result of not
    Mux16(a=yZy, b=notyZy, sel= ny, out= yNZy);

    //now we have our corrected input streams 
    // compute sum and And of these input streams
    // then use Mux on f to send correct result (also gonna have to Mux on not)

    Add16(a=xNZx, b=yNZy, out=xPy);
    And16(a=xNZx, b=yNZy, out=xAy);

    Mux16(a=xAy, b=xPy, sel=f, out=xPAy);
    Not16(in=xPAy, out=notxPAy);
    Mux16(a=xPAy, b=notxPAy, sel=no, out=ostream, out[15]=ostream15, out[0..7]=ostream07,out[8..15]=ostream815,out=out);

    //now we just have to calculate zr and ng
    //  zr is And16 with false... oh wait, no it isn't
    //  we somehow have to check whether all bits in ostream are 0
    // and output that as a single bit.
    //    we shall use 8way or!
    //  ng is Or with ostream[15] and false
    Or(a=ostream15, b=false, out=ng);

    Or8Way(in=ostream07,out = notZero0);
    Or8Way(in=ostream815,out = notZero1);
    Or(a=notZero0, b=notZero1, out=notZero);
    Not(in=notZero, out=zr);
}
