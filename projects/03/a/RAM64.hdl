// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    // as suggested, we should do a similar thing we did to make our 8bit ram
    // but instead of using registers, we use 8bit ram as the building blocks
    // we have to split the "address" into the address part to select which 8bit ram
    // and then from there to select the register within that.
    // DMux on the most significant [3..5] 3 bits of address to get which ram
    // then send the least significant [0..2] as the address to that ram
    // similarly, Mux8Way16 on the outputs in the same way we did with our ram
    DMux8Way(in=load, sel=address[3..5], a=l0,b=l1,c=l2,d=l3,e=l4,f=l5,g=l6,h=l7);
    RAM8(address=address[0..2],in=in, load=l0, out=o0);
    RAM8(address=address[0..2],in=in, load=l1, out=o1);
    RAM8(address=address[0..2],in=in, load=l2, out=o2);
    RAM8(address=address[0..2],in=in, load=l3, out=o3);
    RAM8(address=address[0..2],in=in, load=l4, out=o4);
    RAM8(address=address[0..2],in=in, load=l5, out=o5);
    RAM8(address=address[0..2],in=in, load=l6, out=o6);
    RAM8(address=address[0..2],in=in, load=l7, out=o7);
    Mux8Way16(a=o0,b=o1,c=o2,d=o3,e=o4,f=o5,g=o6,h=o7, sel=address[3..5], out=out);



}
