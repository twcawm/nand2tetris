// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // similar to the construction of the RAM units, we DMux on the most significant bit address
    // then Mux on the most significant bit to get output.
 
    DMux(in=load, sel=address[14], a=loadToRAM,b=loadToIO);
    RAM16K(address=address[0..13], in=in, load=loadToRAM, out=outFromRAM);
    //how do we treat the keyboard/screen memory map?
    //hm, maybe we just use the built-in Screen ship for screen:
    //  the differentiating bit between screen and kbd is address[13]
    DMux(in=loadToIO, sel=address[13], a=loadToScr, b=loadToKbd);
    Screen(address=address[0..12], in=in, load=loadToScr, out=outFromScr);
    Keyboard(out=outFromKbd);
    Mux16(a=outFromScr, b=outFromKbd, sel=address[13], out=outFromIO);
    Mux16(a=outFromRAM, b=outFromIO, sel=address[14], out=out);
    //in hindsight, could have done this with 4way Mux/DMux.  but this is sort of nice too because it differentiates between memory and memory-mapped-IO devices.
    
}
